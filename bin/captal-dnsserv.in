#!/usr/bin/env perl
# This file is a part of captal program.
# See LICENSE file for copyright and license details.

use strict;
use warnings;

use File::Basename;
use Getopt::Std;
use Net::DNS::Nameserver;
use Sys::Syslog;

sub reply_handler;
sub read_config;

my $program = basename $0;
my $version = '0.2';
my $help    = <<"EOH";
Usage: $program [OPTIONS...]
Version: $version

Options:
  -h         Print this help and exit
  -v         Print version and exit
  -a ADDR    Bind ip address                 (default: 192.168.254.1)
  -p NUM     Bind port number                (default: 53)
  -R ADDR    Return ADDR as default host IP  (default: 192.168.254.1)
  -H FILE    Path to the additional HOSTS file

FILE:
  The <hostnames> file should contain one IP and hostname pair per line,
  separated by whitespace, in the following format:

  10.6.6.6      foo.example.com
  10.6.6.6      bar.example.com
  192.168.66.6  www.cs.stonybrook.edu

  Note: If none of these hostnames matched the Request, return the IP
        specified by -R option (or its default if no specified).

EOH

use vars qw($opt_h $opt_v $opt_a $opt_p $opt_R $opt_H %HOST);
getopts('a:p:R:H:hv') or die "$program: Invalid command line args!\n";
$opt_a //= '192.168.254.1';
$opt_p //= 53;
$opt_R //= '192.168.254.1';

print "$help\n"    and exit if $opt_h;
print "$version\n" and exit if $opt_v;

if ($opt_p && $opt_p < 1024 && $> != 0) {
    die "ERROR: Starting at $opt_a:$opt_p requires root privileges!\n";
}

if ($opt_H) {
    die  "$program: The file '$opt_H' missing!\n"  unless -f $opt_H;
    warn "$program: The file '$opt_H' is empty.\n" unless -s $opt_H;
    read_config;
}

my $ns = Net::DNS::Nameserver->new(
    LocalAddr    => $opt_a,
    LocalPort    => $opt_p,
    ReplyHandler => \&reply_handler,
    Verbose      => 1
) or die "$program: Couldn't create nameserver object!\n";

openlog($program, 'cons,pid', 'user');
syslog('info', "Starting at $opt_a:$opt_p\n");

# Catch and handle SIGINT.
$SIG{INT} = sub {
    syslog('info', "Stopping $opt_a:$opt_p, bye\n");
    closelog() and exit;
};

$ns->main_loop;

sub read_config {
    open(my $fd, $opt_H);
    while (<$fd>) {
        next if /^#/ or !length;
        chomp;
        my ($addr, $name) = split /\s+/;
        $HOST{$name} = $addr;
    }
    close $fd;
}

sub reply_handler {
    my ($qname, $qclass, $qtype, $peerhost, $query, $conn) = @_;
    my ($rcode, @ans, @auth, @add);

    syslog('info',
        "Received query from $peerhost to $conn->{sockhost}\n");
    print "Received query from $peerhost to "
        . $conn->{sockhost} . "\n";
    $query->print;

    my $ttl = 3600;
    my $rdata = exists $HOST{$qname} ? $HOST{$qname} : $opt_R;
    my $rr = Net::DNS::RR->new("$qname $ttl $qclass $qtype $rdata");
    push @ans, $rr;
    $rcode = "NOERROR";

    #if ($qtype eq "A" && $qname eq "foo.example.com") {
    #    my ($ttl, $rdata) = (3600, "10.1.2.3");
    #    my $rr = Net::DNS::RR->new("$qname $ttl $qclass $qtype $rdata");
    #    push @ans, $rr;
    #    $rcode = "NOERROR";
    #} elsif ($qname eq "foo.example.com") {
    #    $rcode = "NOERROR";
    #} else {
    #    $rcode = "NXDOMAIN";
    #}

    # mark the answer as authoritative (by setting the 'aa' flag)
    my $headermask = {aa => 1};

    # specify EDNS options  { option => value }
    my $optionmask = {};

    return ($rcode, \@ans, \@auth, \@add, $headermask, $optionmask);
}

# vim:sw=4:ts=4:sts=4:et:cc=72:tw=70
# End of file.
